/*!
* Components - karasu-dev @ v0.1.15
* Copyright 2020 Â© Karasu themes
* Developed by Marcelo (github.com/MarceloTLD)
* MIT License
*/
var components = (function (exports) {
	'use strict';

	const each = (array, callback) => {
	  for (var i = 0; i < array.length; i++) {
	    callback.call(array[i], i, array[i]);
	  }
	};

	const isNode = checkElement => {
	  let check = typeof checkElement;
	  return check == 'object' ? true : false;
	};

	const click = function (nodeElement, action) {
	  let selector = isNode(nodeElement) ? nodeElement : document.querySelector(nodeElement);
	  selector.addEventListener('click', event => action(event));
	};

	const merge = (source, properties) => {
	  var property;

	  for (property in properties) {
	    if (properties.hasOwnProperty(property)) {
	      source[property] = properties[property];
	    }
	  }

	  return source;
	};

	const _ADD_CLASS_CSS = (element, ...className) => {
	  let getClass = [...className];

	  for (var i = getClass.length - 1; i >= 0; i--) {
	    element.classList.add(getClass[i]);
	  }
	};

	const _TOGGLE_CLASS_CSS = (element, className) => {
	  element.classList.toggle(className);
	};

	const _REMOVE_CLASS_CSS = (element, className) => {
	  element.classList.remove(className);
	  return className;
	};

	const _HAS_CLASS_CSS = (element, className) => {
	  const getClassName = element.getAttribute('class');

	  if (getClassName) {
	    const reg = new RegExp(className, 'g'),
	          checkCSS = reg.test(getClassName);
	    return checkCSS ? true : false;
	  }

	  return '';
	};

	const _CLEAN_ALL_CSS = (array, className) => {
	  for (var i = 0; i < array.length; i++) {
	    array[i].classList.remove(className);
	  }
	};

	const css = {
	  "add": _ADD_CLASS_CSS,
	  "remove": _REMOVE_CLASS_CSS,
	  "has": _HAS_CLASS_CSS,
	  "clean": _CLEAN_ALL_CSS,
	  "toggle": _TOGGLE_CLASS_CSS
	};

	const dropdown = config => {
	  // Variable
	  let selector = document.querySelectorAll('.dropdown'); // Config

	  const _OPTION = merge({
	    align: "rt",
	    animation: 'ani-fadeInScale'
	  }, config); // Seteamos la posicion en base a las propiedades top y left de css


	  const setPosition = function (content, parentContent, align) {
	    switch (align) {
	      case 'lt':
	        content.style.left = 0 + 'px';
	        content.style.top = 0 + 'px';
	        break;

	      case 'rt':
	        content.style.right = 0 + 'px';
	        content.style.top = 0 + 'px';
	        break;

	      case 'rb':
	        content.style.right = 0 + 'px';
	        content.style.top = 100 + '%';
	        break;

	      case 'lb':
	        content.style.left = 0 + 'px';
	        content.style.top = 100 + '%';
	        break;
	    }
	  };
	  /*
	  	Seteamos el origen de la transformacion, esto para poder 
	  	tener una animacion mas acorde a cada posicion.
	  */


	  const setOriginTransform = align => {
	    switch (align) {
	      case 'lt':
	        return 'ani-lt';

	      case 'rt':
	        return 'ani-rt';

	      case 'rb':
	        return 'ani-rt';

	      case 'lb':
	        return 'ani-lt';
	    }
	  };

	  each(selector, (index, el) => {
	    let trigger = el.querySelector('.dropdown-trigger'),
	        list = el.querySelector('.dropdown-list');
	    const currentAlign = el.getAttribute('data-align') ? el.getAttribute('data-align') : false;
	    const align = currentAlign ? currentAlign : _OPTION.align; // Seteamos la posicion en el lugar dado

	    setPosition(list, trigger, align); // Seteamos las clases para mostrar la animacion

	    css.add(list, 'ani-05s', setOriginTransform(align));
	    click(trigger, e => {
	      // Prevenimos eventos no deseados (enlace, botones, etc)
	      e.preventDefault();
	      e.stopPropagation(); // let cleanCss = document.querySelectorAll('.dropdown .dropdown-list');
	      // css.clean(cleanCss, 'is-active');
	      // css.clean(cleanCss, _OPTION.animation);

	      css.toggle(list, 'is-active');
	      css.toggle(list, _OPTION.animation);
	    });
	  }); // Cerramos dropdown activos

	  click(document.body, () => {
	    each(selector, (index, el) => {
	      let list = el.querySelector('.dropdown-list');
	      css.remove(list, 'is-active');
	      css.remove(list, _OPTION.animation);
	    });
	  });
	};

	const modal = config => {
	  // Variables
	  const trigger = document.querySelectorAll('.modal-trigger'); // Config

	  const _OPTION = merge({
	    animation: 'ani-fadeInTop'
	  }, config); // Creamos html para mostrar el render


	  const modalRender = (headline, content, animation) => {
	    let modalOuter = document.createElement('div'),
	        modal = document.createElement('div'),
	        modalHeadline = document.createElement('div'),
	        modalContent = document.createElement('div'),
	        modalClose = document.createElement('span'); // Agregamos los css correspondiente

	    css.add(modalOuter, 'modal-outer', 'd-flex', 'a-item-center', 'j-content-center'), css.add(modal, 'modal', headline ? null : 'is-compact', 'ani', animation), css.add(modalHeadline, 'modal-headline'), css.add(modalContent, 'modal-content'), css.add(modalClose, 'modal-close'); // Insertamos el contenido correspondiente

	    modalClose.innerHTML = '<i className="fas fa-times"></i>', modalHeadline.innerHTML = headline ? `<span>${headline}</span><span class="modal-close"><i class="fas fa-times"></i></span>` : `<span class="modal-close"><i class="fas fa-times"></i></span>`, modalContent.innerHTML = content; // Apilamos todo,

	    modal.appendChild(modalHeadline);
	    modal.appendChild(modalContent);
	    modal.appendChild(modalClose);
	    modalOuter.appendChild(modal); // Creamos las acciones para eliminar el modal activo

	    click(modal, e => e.stopPropagation());
	    click(modalOuter, () => modalOuter.remove()); // Creamos la accion para eliminar el modal al presionar sobre la "X"

	    click(modalHeadline.querySelector('.modal-close'), e => modalOuter.remove());
	    return modalOuter;
	  };

	  each(trigger, (index, el) => {
	    let body = document.body,
	        hash = el.getAttribute('data-content'),
	        content = document.getElementById(hash).innerHTML,
	        title = el.getAttribute('data-headline');
	    click(el, e => {
	      e.preventDefault();
	      let modalHTML = modalRender(title ? title : '', content, _OPTION.animation);
	      body.appendChild(modalHTML);
	    });
	  });
	};

	const snackbar = config => {
	  // Variables
	  let body = document.body,
	      trigger = document.querySelectorAll('.snackbar-trigger'); // Config

	  const _OPTION = merge({
	    animation: 'ani-fadeInTop',
	    dir: 'rt',
	    dur: 600
	  }, config);

	  const snackContainer = direction => {
	    let container = document.createElement('div');
	    css.add(container, direction ? 'is-' + direction : 'is-rb', 'snack-container');
	    return container;
	  };

	  const snackItem = (content, color, animation) => {
	    let item = document.createElement('div');
	    css.add(item, color ? color : null, 'snack', 'ani', animation);
	    item.innerHTML = content;
	    setTimeout(() => {
	      item.remove();
	    }, _OPTION.dur);
	    return item;
	  };

	  each(trigger, (index, el) => {
	    let text = el.getAttribute('data-text'),
	        dir = el.getAttribute('data-dir'),
	        color = el.getAttribute('data-color');
	    let container = snackContainer(dir ? dir : _OPTION.dir);
	    body.appendChild(container);
	    click(el, e => {
	      e.preventDefault();
	      container.appendChild(snackItem(text, "is-" + color, _OPTION.animation));
	    });
	  });
	};

	const collapse = config => {
	  // Variables
	  let collapse = document.querySelectorAll('.collapse-content'),
	      trigger = document.querySelectorAll('.collapse-trigger'); // Config

	  const _OPTION = merge({
	    animation: {
	      name: 'ani-fadeInTop',
	      origin: 'mt'
	    }
	  }, config);

	  each(trigger, (index, el) => {
	    let parent = el.parentNode,
	        parentItem = el.nextElementSibling;
	    css.add(parentItem, 'ani', 'ani-' + _OPTION.animation.origin);
	    click(el, e => {
	      if (css.has(parent, 'is-collapsible')) {
	        css.clean(collapse, 'is-active');
	        css.clean(collapse, _OPTION.animation.name);
	        css.add(parentItem, 'is-active');
	        css.add(parentItem, _OPTION.animation.name);
	      } else {
	        css.toggle(parentItem, 'is-active');
	        css.toggle(parentItem, _OPTION.animation.name);
	      }
	    });
	  });
	};

	exports.collapse = collapse;
	exports.dropdown = dropdown;
	exports.modal = modal;
	exports.snackbar = snackbar;

	Object.defineProperty(exports, '__esModule', { value: true });

	return exports;

}({}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
