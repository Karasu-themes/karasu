var raven = (function (exports) {
	'use strict';

	const createScript = (homeURL, attributes) => {
	  let scrpt = document.createElement('script');
	  scrpt.src = `${homeURL}/feeds/posts/${attributes}`;
	  return scrpt;
	};

	const format = (data, config) => {
	  function getID(id) {
	    let getID = id.match(/post-\d{1,}/g)[0];
	    return getID.replace('post-', '');
	  }

	  function getLink(link) {
	    let getLink = link,
	        result = "";

	    for (var i = 0; i < getLink.length; i++) {
	      if (getLink[i].rel == 'alternate') {
	        result = getLink[i].href;
	      }
	    }

	    return result;
	  }

	  function cleanHTML(html) {
	    return html.replace(/<[^>]*>?/g, '');
	  }

	  function summary(content) {
	    return config.summary ? cleanHTML(content).substr(0, config.summary) : cleanHTML(content).substr(0, 100);
	  }

	  function getThumbnail(content) {
	    let temp = document.createElement('div');
	    temp.innerHTML = content;
	    let getImage = temp.querySelector('img');
	    return getImage ? getImage.getAttribute('src') : "";
	  }

	  const content = data.content ? data.content.$t : data.summary.$t;
	  return {
	    id: getID(data.id.$t),
	    title: data.title ? data.title.$t : 'No title',
	    thumbnail: data.media$thumbnail ? data.media$thumbnail.url.replace(/s\B\d{2,4}-c/, config.img ? config.img : 's200') : getThumbnail,
	    label: data.category ? data.category.map(el => el.term) : '',
	    link: getLink(data.link),
	    content: content,
	    summary: summary(content),
	    published: data.published.$t,
	    update: data.updated.$t
	  };
	};

	const parser = (json, html) => {
	  return html.replace(/\{\w+\}/g, value => {
	    let objName = value.replace(/{|}/g, '');
	    return json[objName];
	  });
	};

	/*!
	* Blogger - karasu-dev @ v0.1.12
	* Copyright 2020 Â© Karasu themes
	* Developed by Marcelo (github.com/MarceloTLD)
	* MIT License
	*/
	const blogger = {
	  "createScript": createScript,
	  "format": format,
	  "parser": parser
	};

	exports.blogger = blogger;

	Object.defineProperty(exports, '__esModule', { value: true });

	return exports;

}({}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvZ2dlci5qcyIsInNvdXJjZXMiOlsic291cmNlL2pzL2Jsb2dnZXIvbW9kdWxlL2NyZWF0ZVNjcmlwdC5qcyIsInNvdXJjZS9qcy9ibG9nZ2VyL21vZHVsZS9mb3JtYXQuanMiLCJzb3VyY2UvanMvYmxvZ2dlci9tb2R1bGUvcGFyc2VyLmpzIiwic291cmNlL2pzL2Jsb2dnZXIvYmxvZ2dlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjcmVhdGVTY3JpcHQgPSAoaG9tZVVSTCwgYXR0cmlidXRlcykgPT4ge1xyXG5cclxuXHRsZXQgc2NycHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcclxuXHRzY3JwdC5zcmMgPSBgJHtob21lVVJMfS9mZWVkcy9wb3N0cy8ke2F0dHJpYnV0ZXN9YDtcclxuXHJcblx0cmV0dXJuIHNjcnB0O1xyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgY3JlYXRlU2NyaXB0IH0iLCJjb25zdCBmb3JtYXQgPSAoZGF0YSwgY29uZmlnKSA9PiB7XHJcblxyXG5cdGZ1bmN0aW9uIGdldElEKGlkKSB7XHJcblx0XHRsZXQgZ2V0SUQgPSBpZC5tYXRjaCgvcG9zdC1cXGR7MSx9L2cpWzBdO1xyXG5cdFx0cmV0dXJuIGdldElELnJlcGxhY2UoJ3Bvc3QtJywgJycpO1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gZ2V0TGluayhsaW5rKSB7XHJcblx0XHRsZXQgZ2V0TGluayA9IGxpbmssXHJcblx0XHRcdHJlc3VsdCA9IFwiXCI7XHJcblx0XHRcclxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZ2V0TGluay5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRpZiAoZ2V0TGlua1tpXS5yZWwgPT0gJ2FsdGVybmF0ZScpIHtcclxuXHRcdFx0XHRyZXN1bHQgPSBnZXRMaW5rW2ldLmhyZWY7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdH1cclxuXHJcblx0ZnVuY3Rpb24gY2xlYW5IVE1MIChodG1sKSB7XHJcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKC88W14+XSo+Py9nLCAnJylcclxuXHR9XHJcblxyXG5cdGZ1bmN0aW9uIHN1bW1hcnkgKGNvbnRlbnQpIHtcclxuXHRcdHJldHVybiBjb25maWcuc3VtbWFyeSA/IGNsZWFuSFRNTChjb250ZW50KS5zdWJzdHIoMCwgY29uZmlnLnN1bW1hcnkpIDogY2xlYW5IVE1MKGNvbnRlbnQpLnN1YnN0cigwLCAxMDApXHJcblx0fVxyXG5cclxuXHRmdW5jdGlvbiBnZXRUaHVtYm5haWwgKGNvbnRlbnQpIHtcclxuXHRcdGxldCB0ZW1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblx0XHR0ZW1wLmlubmVySFRNTD1jb250ZW50O1xyXG5cclxuXHRcdGxldCBnZXRJbWFnZSA9IHRlbXAucXVlcnlTZWxlY3RvcignaW1nJyk7XHJcblxyXG5cdFx0cmV0dXJuIGdldEltYWdlID8gZ2V0SW1hZ2UuZ2V0QXR0cmlidXRlKCdzcmMnKSA6IFwiXCI7XHJcblx0fVxyXG5cclxuXHRjb25zdCBjb250ZW50ID0gZGF0YS5jb250ZW50ID8gZGF0YS5jb250ZW50LiR0IDogZGF0YS5zdW1tYXJ5LiR0O1xyXG5cdFxyXG5cdHJldHVybiB7XHJcblx0XHRpZDogZ2V0SUQoZGF0YS5pZC4kdCksXHJcblx0XHR0aXRsZTogZGF0YS50aXRsZSA/IGRhdGEudGl0bGUuJHQgOiAnTm8gdGl0bGUnLFxyXG5cdFx0dGh1bWJuYWlsOiBkYXRhLm1lZGlhJHRodW1ibmFpbCA/IGRhdGEubWVkaWEkdGh1bWJuYWlsLnVybC5yZXBsYWNlKC9zXFxCXFxkezIsNH0tYy8sIGNvbmZpZy5pbWcgPyBjb25maWcuaW1nIDogJ3MyMDAnKSA6IGdldFRodW1ibmFpbCxcclxuXHRcdGxhYmVsOiBkYXRhLmNhdGVnb3J5ID8gZGF0YS5jYXRlZ29yeS5tYXAoZWw9PmVsLnRlcm0pIDogJycsXHJcblx0XHRsaW5rOiBnZXRMaW5rKGRhdGEubGluayksXHJcblx0XHRjb250ZW50OiBjb250ZW50LFxyXG5cdFx0c3VtbWFyeTogc3VtbWFyeShjb250ZW50KSxcclxuXHRcdHB1Ymxpc2hlZDogZGF0YS5wdWJsaXNoZWQuJHQsXHJcblx0XHR1cGRhdGU6IGRhdGEudXBkYXRlZC4kdFxyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0IHsgZm9ybWF0IH0iLCJjb25zdCBwYXJzZXIgPSAoanNvbiwgaHRtbCkgPT4ge1xyXG5cdHJldHVybiBodG1sLnJlcGxhY2UoL1xce1xcdytcXH0vZywgdmFsdWU9PntcclxuXHRcdGxldCBvYmpOYW1lID0gdmFsdWUucmVwbGFjZSgve3x9L2csICcnKTtcclxuXHRcdHJldHVybiBqc29uW29iak5hbWVdO1xyXG5cdH0pXHJcbn1cclxuXHJcbmV4cG9ydCB7IHBhcnNlciB9IiwiLyohXHJcbiogQmxvZ2dlciAtIGthcmFzdS1kZXYgQCB2MC4xLjEyXHJcbiogQ29weXJpZ2h0IDIwMjAgwqkgS2FyYXN1IHRoZW1lc1xyXG4qIERldmVsb3BlZCBieSBNYXJjZWxvIChnaXRodWIuY29tL01hcmNlbG9UTEQpXHJcbiogTUlUIExpY2Vuc2VcclxuKi9cclxuXHJcbmltcG9ydCB7IGNyZWF0ZVNjcmlwdCB9IGZyb20gJy4vbW9kdWxlL2NyZWF0ZVNjcmlwdC5qcyc7XHJcbmltcG9ydCB7IGZvcm1hdCB9IGZyb20gJy4vbW9kdWxlL2Zvcm1hdC5qcyc7XHJcbmltcG9ydCB7IHBhcnNlciB9IGZyb20gJy4vbW9kdWxlL3BhcnNlci5qcyc7XHJcblxyXG5jb25zdCBibG9nZ2VyID0ge1xyXG5cdFwiY3JlYXRlU2NyaXB0XCI6IGNyZWF0ZVNjcmlwdCxcclxuXHRcImZvcm1hdFwiOiBmb3JtYXQsXHJcblx0XCJwYXJzZXJcIjogcGFyc2VyXHJcbn1cclxuXHJcbmV4cG9ydCB7IGJsb2dnZXIgfSJdLCJuYW1lcyI6WyJjcmVhdGVTY3JpcHQiLCJob21lVVJMIiwiYXR0cmlidXRlcyIsInNjcnB0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic3JjIiwiZm9ybWF0IiwiZGF0YSIsImNvbmZpZyIsImdldElEIiwiaWQiLCJtYXRjaCIsInJlcGxhY2UiLCJnZXRMaW5rIiwibGluayIsInJlc3VsdCIsImkiLCJsZW5ndGgiLCJyZWwiLCJocmVmIiwiY2xlYW5IVE1MIiwiaHRtbCIsInN1bW1hcnkiLCJjb250ZW50Iiwic3Vic3RyIiwiZ2V0VGh1bWJuYWlsIiwidGVtcCIsImlubmVySFRNTCIsImdldEltYWdlIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsIiR0IiwidGl0bGUiLCJ0aHVtYm5haWwiLCJtZWRpYSR0aHVtYm5haWwiLCJ1cmwiLCJpbWciLCJsYWJlbCIsImNhdGVnb3J5IiwibWFwIiwiZWwiLCJ0ZXJtIiwicHVibGlzaGVkIiwidXBkYXRlIiwidXBkYXRlZCIsInBhcnNlciIsImpzb24iLCJ2YWx1ZSIsIm9iak5hbWUiLCJibG9nZ2VyIl0sIm1hcHBpbmdzIjoiOzs7Q0FBQSxNQUFNQSxZQUFZLEdBQUcsQ0FBQ0MsT0FBRCxFQUFVQyxVQUFWLEtBQXlCO0NBRTdDLE1BQUlDLEtBQUssR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLFFBQXZCLENBQVo7Q0FDQUYsRUFBQUEsS0FBSyxDQUFDRyxHQUFOLEdBQWEsR0FBRUwsT0FBUSxnQkFBZUMsVUFBVyxFQUFqRDtDQUVBLFNBQU9DLEtBQVA7Q0FFQSxDQVBEOztDQ0FBLE1BQU1JLE1BQU0sR0FBRyxDQUFDQyxJQUFELEVBQU9DLE1BQVAsS0FBa0I7Q0FFaEMsV0FBU0MsS0FBVCxDQUFlQyxFQUFmLEVBQW1CO0NBQ2xCLFFBQUlELEtBQUssR0FBR0MsRUFBRSxDQUFDQyxLQUFILENBQVMsY0FBVCxFQUF5QixDQUF6QixDQUFaO0NBQ0EsV0FBT0YsS0FBSyxDQUFDRyxPQUFOLENBQWMsT0FBZCxFQUF1QixFQUF2QixDQUFQO0NBQ0E7O0NBRUQsV0FBU0MsT0FBVCxDQUFpQkMsSUFBakIsRUFBdUI7Q0FDdEIsUUFBSUQsT0FBTyxHQUFHQyxJQUFkO0NBQUEsUUFDQ0MsTUFBTSxH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
