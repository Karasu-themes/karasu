/*!
* karasu@utils - v0.3.6
* Copyright 2020 Â© Karasu themes
* Developed by Marcelo (github.com/MarceloTLD)
* MIT License
*/
var utils = (function (exports) {
	'use strict';

	const isNode = checkElement => {
	  let check = typeof checkElement;
	  return check == 'object' ? true : false;
	};

	const click = function (nodeElement, action) {
	  let selector = isNode(nodeElement) ? nodeElement : document.querySelector(nodeElement);
	  selector.addEventListener('click', event => action(event));
	};

	const toggle = (nodeElement, even, odd) => {
	  let selector = isNode(nodeElement) ? nodeElement : document.querySelector(nodeElement),
	      control = 0;
	  selector.addEventListener('click', event => {
	    if (control == 0) {
	      even(event);
	      control = 1;
	    } else {
	      odd(event);
	      control = 0;
	    }
	  });
	};

	const clickEach = (nodeElements, action) => {
	  let selector = isNode(nodeElement) ? nodeElements : document.querySelectorAll(nodeElements);

	  for (var i = 0; i < selector.length; i++) {
	    selector[i].addEventListener('click', event => action(event));
	  }
	};

	const _ADD_CLASS_CSS = (element, ...className) => {
	  let getClass = [...className];

	  for (var i = getClass.length - 1; i >= 0; i--) {
	    element.classList.add(getClass[i]);
	  }
	};

	const _TOGGLE_CLASS_CSS = (element, className) => {
	  element.classList.toggle(className);
	};

	const _REMOVE_CLASS_CSS = (element, className) => {
	  element.classList.remove(className);
	  return className;
	};

	const _HAS_CLASS_CSS = (element, className) => {
	  const getClassName = element.getAttribute('class');

	  if (getClassName) {
	    const reg = new RegExp(className, 'g'),
	          checkCSS = reg.test(getClassName);
	    return checkCSS ? true : false;
	  }

	  return '';
	};

	const _CLEAN_ALL_CSS = (array, className) => {
	  for (var i = 0; i < array.length; i++) {
	    array[i].classList.remove(className);
	  }
	};

	const css = {
	  "add": _ADD_CLASS_CSS,
	  "remove": _REMOVE_CLASS_CSS,
	  "has": _HAS_CLASS_CSS,
	  "clean": _CLEAN_ALL_CSS,
	  "toggle": _TOGGLE_CLASS_CSS
	};

	const each = (array, callback) => {
	  for (var i = 0; i < array.length; i++) {
	    callback.call(array[i], i, array[i]);
	  }
	};

	const merge = (source, properties) => {
	  var property;

	  for (property in properties) {
	    if (properties.hasOwnProperty(property)) {
	      source[property] = properties[property];
	    }
	  }

	  return source;
	};

	const format = (data, config) => {
	  function getID(id) {
	    let getID = id.match(/post-\d{1,}/g)[0];
	    return getID.replace('post-', '');
	  }

	  function getLink(link) {
	    let getLink = link,
	        result = "";

	    for (var i = 0; i < getLink.length; i++) {
	      if (getLink[i].rel == 'alternate') {
	        result = getLink[i].href;
	      }
	    }

	    return result;
	  }

	  function cleanHTML(html) {
	    return html.replace(/<[^>]*>?/g, '');
	  }

	  function summary(content) {
	    return config.summary ? cleanHTML(content).substr(0, config.summary) : cleanHTML(content).substr(0, 100);
	  }

	  function getThumbnail(content) {
	    let temp = document.createElement('div');
	    temp.innerHTML = content;
	    let getImage = temp.querySelector('img');
	    return getImage ? getImage.getAttribute('src') : "";
	  }

	  const content = data.content ? data.content.$t : data.summary.$t;
	  return {
	    id: getID(data.id.$t),
	    title: data.title ? data.title.$t : 'No title',
	    thumbnail: data.media$thumbnail ? data.media$thumbnail.url.replace(/s\B\d{2,4}-c/, config.img ? config.img : 's200') : getThumbnail(content),
	    label: data.category ? data.category.map(el => el.term) : '',
	    link: getLink(data.link),
	    content: content,
	    summary: summary(content),
	    published: data.published.$t,
	    update: data.updated.$t
	  };
	};

	const parser = (json, html) => {
	  return html.replace(/\{\w+\}/g, value => {
	    let objName = value.replace(/{|}/g, '');
	    return json[objName];
	  });
	};

	const _SET = (keyname, value) => {
	  localStorage.setItem(keyname, value);
	  return _GET(keyname);
	};

	const _GET = keyname => {
	  let item = localStorage.getItem(keyname);
	  if (!item) return false;
	  return item;
	};

	const _REMOVE = (keyname, callback) => {
	  let getItem = _GET(keyname);

	  if (!getItem) return false;
	  localStorage.removeItem(keyname);
	  if (callback) callback(keyname, getItem);
	  return getItem;
	};

	const _HAS = keyname => {
	  let getItem = _GET(keyname);

	  if (getItem) {
	    return true;
	  } else {
	    return false;
	  }
	};

	const _HTML = (keyname, template) => {
	  let getItem = _GET(keyname);

	  const parserHTML = (obj, value) => {
	    return value.replace(/\{\w+\}/g, value => {
	      let objName = value.replace(/{|}/g, '');
	      return obj[objName];
	    });
	  };

	  if (_HAS(keyname)) {
	    let obj = _PARSER(getItem),
	        HTML = '';

	    if (!Array.isArray(obj)) {
	      return parserHTML(obj, template);
	    } else {
	      each(obj, (index, value) => {
	        HTML += parserHTML(value, template);
	      });
	      return HTML;
	    }
	  } else {
	    return '';
	  }
	};

	const _SERIALIZE = value => {
	  return JSON.stringify(value);
	};

	const _PARSER = value => {
	  return JSON.parse(value);
	};

	const ls = {
	  get: _GET,
	  set: _SET,
	  remove: _REMOVE,
	  has: _HAS,
	  serialize: _SERIALIZE,
	  parser: _PARSER,
	  html: _HTML
	};

	exports.click = click;
	exports.clickEach = clickEach;
	exports.css = css;
	exports.each = each;
	exports.format = format;
	exports.ls = ls;
	exports.merge = merge;
	exports.parser = parser;
	exports.toggle = toggle;

	Object.defineProperty(exports, '__esModule', { value: true });

	return exports;

}({}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
