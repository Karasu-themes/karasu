/*!
* karasu@component - v0.3.4
* Copyright 2020 Â© Karasu themes
* Developed by Marcelo (github.com/MarceloTLD)
* MIT License
*/
var component = (function (exports) {
	'use strict';

	const each = (array, callback) => {
	  for (var i = 0; i < array.length; i++) {
	    callback.call(array[i], i, array[i]);
	  }
	};

	const isNode = checkElement => {
	  let check = typeof checkElement;
	  return check == 'object' ? true : false;
	};

	const click = function (nodeElement, action) {
	  let selector = isNode(nodeElement) ? nodeElement : document.querySelector(nodeElement);
	  selector.addEventListener('click', event => action(event));
	};

	const _ADD_CLASS_CSS = (element, ...className) => {
	  let getClass = [...className];

	  for (var i = getClass.length - 1; i >= 0; i--) {
	    element.classList.add(getClass[i]);
	  }
	};

	const _TOGGLE_CLASS_CSS = (element, className) => {
	  element.classList.toggle(className);
	};

	const _REMOVE_CLASS_CSS = (element, className) => {
	  element.classList.remove(className);
	  return className;
	};

	const _HAS_CLASS_CSS = (element, className) => {
	  const getClassName = element.getAttribute('class');

	  if (getClassName) {
	    const reg = new RegExp(className, 'g'),
	          checkCSS = reg.test(getClassName);
	    return checkCSS ? true : false;
	  }

	  return '';
	};

	const _CLEAN_ALL_CSS = (array, className) => {
	  for (var i = 0; i < array.length; i++) {
	    array[i].classList.remove(className);
	  }
	};

	const css = {
	  "add": _ADD_CLASS_CSS,
	  "remove": _REMOVE_CLASS_CSS,
	  "has": _HAS_CLASS_CSS,
	  "clean": _CLEAN_ALL_CSS,
	  "toggle": _TOGGLE_CLASS_CSS
	};

	const _TAB = (() => {
	  const tabs = document.querySelectorAll('.tab');
	  each(tabs, (i, tabItem) => {
	    let tabTrigger = tabItem.querySelectorAll('.tab-select-item'),
	        tabContent = tabItem.querySelectorAll('.tab-item');
	    each(tabTrigger, (index, item) => {
	      let getHash = item.getAttribute('data-id'),
	          currentItem = tabItem.querySelector('#' + getHash);
	      click(item, e => {
	        // Clean all select
	        css.clean(tabTrigger, 'is-active');
	        css.clean(tabContent, 'is-active'); // Active current item

	        css.add(item, 'is-active');
	        css.add(currentItem, 'is-active');
	      });
	    });
	  });
	})();

	const _COLLAPSE = (() => {
	  let trigger = document.querySelectorAll('.collapse-trigger'),
	      tabs = document.querySelectorAll('.collapse');
	  each(trigger, (i, el) => {
	    let self = el;
	    let content = self.parentNode.querySelector('.collapse-content'),
	        isCollapsible = css.has(self.parentNode, 'is-collapsible'); // console.log(isCollapsible)

	    click(self, () => {
	      if (isCollapsible) {
	        const isActive = css.has(el, 'is-active');

	        if (!isActive) {
	          each(tabs, (index, element) => {
	            css.remove(element.querySelector('.collapse-trigger'), 'is-active');
	            css.remove(element.querySelector('.collapse-content'), 'is-active');
	          });
	        }

	        css.toggle(self, 'is-active');
	        css.toggle(content, 'is-active');
	      } else {
	        css.toggle(self, 'is-active');
	        css.toggle(content, 'is-active');
	      }
	    });
	  });
	})();

	let body = document.body,
	    dropdown = document.querySelectorAll('.dropdown .dropdown-trigger');

	const _get_position = (reference, node) => {
	  let data = reference.getBoundingClientRect(),
	      obj = {};
	  obj.left = data.left;
	  obj.top = data.top;
	  obj.right = data.right - node.scrollWidth;
	  obj.bottom = data.bottom;
	  return obj;
	}; // Set position for dropdown elements


	const _set_position = (reference, node) => {
	  let pos = _get_position(reference, node),
	      data = reference.getBoundingClientRect();

	  node.style.position = 'absolute';
	  node.style.left = pos.right + "px";
	  node.style.top = data.top + "px";
	};

	const _clean_dropdown = node => {
	  each(node, (i, el) => {
	    let content = el.parentNode.querySelector('.dropdown-content');
	    css.remove(content, 'is-visible');
	  });
	};

	const _dropdown = (() => {
	  each(dropdown, (index, node) => {
	    let content = node.parentNode.querySelector('.dropdown-content');

	    _set_position(node, content);

	    click(content, e => e.stopPropagation());
	    click(node, evt => {
	      evt.stopPropagation();

	      _clean_dropdown(dropdown);

	      css.toggle(content, 'is-visible');
	    });
	  });
	})(); // Close dropdown when clicked outside container


	click(body, e => {
	  _clean_dropdown(dropdown);
	});

	const _MODAL_TEMPLATE = (modal_headline, modal_content) => {
	  let outer = document.createElement('div'),
	      inner = document.createElement('div'),
	      headline = document.createElement('div'),
	      content = document.createElement('div');
	  css.add(outer, 'modal-outer'), css.add(inner, 'modal'), css.add(headline, 'modal-headline'), css.add(content, 'modal-content');

	  if (modal_headline) {
	    headline.innerHTML = '<h2>' + modal_headline + '</h2>';
	    inner.appendChild(headline);
	  }

	  content.innerHTML = modal_content;
	  inner.appendChild(content);
	  outer.appendChild(inner);
	  return outer;
	};

	const _MODAL = (() => {
	  let trigger = document.querySelectorAll('[data-modalID]'),
	      body = document.body;
	  each(trigger, (i, el) => {
	    let self = el;

	    let hash = self.getAttribute('data-modalID'),
	        getTitle = self.getAttribute('data-headline'),
	        getContent = document.getElementById(hash).innerHTML,
	        modal = _MODAL_TEMPLATE(getTitle, getContent),
	        content = modal.querySelector('.modal');

	    click(el, () => {
	      body.appendChild(modal);
	    });
	    click(content, e => e.stopPropagation());
	    click(modal, () => {
	      modal.remove();
	    });
	  });
	})();

	exports.collapse = _COLLAPSE;
	exports.dropdown = _dropdown;
	exports.modal = _MODAL;
	exports.tab = _TAB;

	Object.defineProperty(exports, '__esModule', { value: true });

	return exports;

}({}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
