/*!
* karasu@component - v1.0.0
* Copyright 2020 © Karasu themes
* Developed by Marcelo (github.com/MarceloTLD)
* MIT License
*/
var component = (function (exports) {
  'use strict';

  const isNode = checkElement => {
    let check = typeof checkElement;
    return check == 'object' ? true : false;
  };

  const nodeToArr = arrNode => {
    let newArr = [];

    for (let i = 0; i < arrNode.length; i++) {
      newArr[i] = arrNode[i];
    }

    return newArr;
  };

  /*
  Pequeño wrapper para manipular el dom con javascript 
  de manera más minimizada
  */

  const _QUERY = (selectorName, nodeParent) => {
    if (!selectorName) return false;
    let result = (nodeParent ? nodeParent : document).querySelector(selectorName);
    return result;
  };

  const _QUERY_All = (selectorName, nodeParent) => {
    if (!selectorName) return false;
    let result = nodeToArr((nodeParent ? nodeParent : document).querySelectorAll(selectorName));
    return result;
  };

  const _QUERY_ID = idName => {
    if (!idName) return false;
    let result = (nodeParent ? nodeParent : document).getElementById(selectorName);
    return result;
  };

  const _ATTR = (node, attrName) => {
    return node.getAttribute(attrName);
  };

  const _SET_ATTR = (node, attrName, attrValue) => {
    return node.setAttribute(attrValue, attrName);
  };

  const dom = {
    query: _QUERY,
    queryAll: _QUERY_All,
    queryID: _QUERY_ID,
    attr: _ATTR,
    setAttr: _SET_ATTR
  };

  const each = (array, callback) => {
    for (var i = 0; i < array.length; i++) {
      callback.call(array[i], i, array[i]);
    }
  };

  const _ADD_CLASS_CSS = (element, ...className) => {
    let getClass = [...className];

    for (var i = getClass.length - 1; i >= 0; i--) {
      element.classList.add(getClass[i]);
    }
  };

  const _TOGGLE_CLASS_CSS = (element, className) => {
    element.classList.toggle(className);
  };

  const _REMOVE_CLASS_CSS = (element, className) => {
    element.classList.remove(className);
    return className;
  };

  const _HAS_CLASS_CSS = (element, className) => {
    const getClassName = element.getAttribute('class');

    if (getClassName) {
      const reg = new RegExp(className, 'g'),
            checkCSS = reg.test(getClassName);
      return checkCSS ? true : false;
    }

    return '';
  };

  const _CLEAN_ALL_CSS = (array, className) => {
    for (var i = 0; i < array.length; i++) {
      array[i].classList.remove(className);
    }
  };

  const css = {
    "add": _ADD_CLASS_CSS,
    "remove": _REMOVE_CLASS_CSS,
    "has": _HAS_CLASS_CSS,
    "clean": _CLEAN_ALL_CSS,
    "toggle": _TOGGLE_CLASS_CSS
  };

  const click = function (nodeElement, action) {
    let selector = isNode(nodeElement) ? nodeElement : document.querySelector(nodeElement);
    selector.addEventListener('click', event => action(event));
  };

  const tabs = (() => {
    let getTabs = dom.queryAll('.cv-tabs');

    const selectiveTab = (indexTab, button, items) => {
      let getItem = dom.queryAll('.cv-tabs-item', items);

      if (button[indexTab]) {
        css.add(button[indexTab], 'is-active');
        css.add(getItem[indexTab], 'is-active');
      } else {
        css.add(button[0], 'is-active');
        css.add(getItem[0], 'is-active');
      }
    };

    each(getTabs, (index, tab) => {
      let indexTab = dom.attr(tab, 'data-selected-index') ? dom.attr(tab, 'data-selected-index') : 0,
          selector = dom.query('.cv-tabs-selector', tab),
          button = dom.queryAll('.cv-tabs-selector button', selector),
          body = dom.query('.cv-tabs-body', tab);
      selectiveTab(indexTab, button, body);
      each(button, (i, btn) => {
        click(btn, () => {
          let hash = dom.attr(btn, 'data-id'),
              item = nodeToArr(body.children),
              index = item.findIndex(current => {
            return dom.attr(current, 'id') === hash;
          });
          css.clean(button, 'is-active');
          css.add(btn, 'is-active');
          css.clean(item, 'is-active');
          css.add(item[index], 'is-active');
        });
      });
    });
  })();

  const dropdown = (() => {
    let trigger = _QUERY_All('.cv-dropdown .cv-dropdown-trigger'),
        body = document.body;
    each(trigger, (i, btn) => {
      let dbody = btn.parentNode;
      click(btn, e => {
        e.stopPropagation();
        css.clean(trigger.map(key => {
          return key.parentNode;
        }), 'is-visible');
        css.add(dbody, 'is-visible');
      });
      click(_QUERY('.cv-dropdown-body', dbody), e => e.stopPropagation());
    });
    click(body, () => {
      each(trigger, (i, btn) => {
        let cbtn = btn.parentNode;
        css.remove(cbtn, 'is-visible');
      });
    });
  })();

  const collapsible = (() => {
    let trigger = _QUERY_All('.collapsible-trigger');
    if (!trigger.length) return false;
    each(trigger, (i, el) => {
      const body = _QUERY('.collapsible-content', el.parentNode);
      click(el, () => {
        if (!css.has(el, 'is-active')) {
          css.clean(trigger.map(el => _QUERY('.collapsible-content', el.parentNode)), 'is-active');
          css.clean(trigger, 'is-active');
          css.add(body, 'is-active');
          css.add(el, 'is-active');
        } else {
          css.remove(body, 'is-active');
          css.remove(el, 'is-active');
        }
      });
    });
  })();

  exports.collapsible = collapsible;
  exports.dropdown = dropdown;
  exports.tabs = tabs;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}));

//# sourceMappingURL=data:application/json;charset=utf8;base64,
